package com.fudanuniversity.MySpringBoot.Controller;
import com.fudanuniversity.MySpringBoot.Entity.User;
import com.fudanuniversity.MySpringBoot.Repository.UserRepository;
import com.fudanuniversity.MySpringBoot.utils.Md5;
import com.fudanuniversity.MySpringBoot.utils.Role;
import com.fudanuniversity.MySpringBoot.utils.TokenUtil;
import com.fudanuniversity.MySpringBoot.utils.UserRequest;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    //添加新用户，stuID是唯一的标识
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody User user) {
        //用户权限验证
        String token  = UserRequest.getToken();
        Integer roleId = TokenUtil.getRoleId(token);
        if(roleId!= Role.Administrator.ordinal()) return "";

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        JSONObject json=new JSONObject();
        //用户已经存在
        if(userRepository.findByStudentID(user.getStudentID())!=null) {json.put("result","fail");return json.toString();}
        //密码初始化为学号
        try {
            String encryptedPassword = Md5.EncoderByMd5(user.getStudentID());
            user.setPassword(encryptedPassword);
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        userRepository.save(user);
        json.put("result","success");
        return json.toString();
    }

    @GetMapping(path="/login")
    public @ResponseBody String login(@RequestParam String studentID, @RequestParam String password){
        User user = userRepository.findByStudentID(studentID);
        JSONObject json=new JSONObject();
        if(user!=null){
            try {
                if(Md5.checkpassword(password,user.getPassword())) {
                    String token= TokenUtil.sign(user);
                    json.put("result","success");
                    json.put("token",token);
                    json.put("name",user.getName());
                    json.put("id",user.getId());
                    json.put("studentID",user.getStudentID());
                    json.put("roleID",user.getRoleID());
                    return json.toString();
                }
                else {
                    json.put("result","fail");;
                    return  json.toString();
                }
            } catch (NoSuchAlgorithmException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (UnsupportedEncodingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        json.put("result","fail");
        return  json.toString();

    }

    @GetMapping(path = "/delete")
    public @ResponseBody String delete(@RequestParam Integer id){
        //用户权限验证
        String token  = UserRequest.getToken();
        Integer roleId = TokenUtil.getRoleId(token);
        if(roleId!= Role.Administrator.ordinal()) return "";

        JSONObject json=new JSONObject();
        if(userRepository.findById(id).isPresent()) {
            User user = userRepository.findById(id).get();
            userRepository.delete(user);
            json.put("result", "success");
        }
        else json.put("result", "fail");
        return json.toString();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

}